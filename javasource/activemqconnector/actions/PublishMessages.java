// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package activemqconnector.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import org.apache.activemq.ActiveMQConnectionFactory;
import activemqconnector.proxies.ConfigurationType;
import activemqconnector.proxies.Message;
import activemqconnector.proxies.PublishAction;
import activemqconnector.proxies.AMQConfiguration;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.ExceptionListener;
import javax.jms.JMSException;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import activemqconnector.helper.ActiveMQConnectorHelper;

public class PublishMessages extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __publishAction;
	private activemqconnector.proxies.PublishAction publishAction;

	public PublishMessages(IContext context, IMendixObject publishAction)
	{
		super(context);
		this.__publishAction = publishAction;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.publishAction = __publishAction == null ? null : activemqconnector.proxies.PublishAction.initialize(getContext(), __publishAction);

		// BEGIN USER CODE
		validateInput(publishAction);
		List<Message> messages = publishAction.getmessages();
		if (messages == null) return true;
		Connection connection = null;
		Session session = null;
		try {
			AMQConfiguration configuration = publishAction.getconfiguration();
			ActiveMQConnectionFactory factory = ActiveMQConnectorHelper.createConnectionFactory(configuration);
	        connection = factory.createConnection();
			connection.start();
			session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
			String queue = configuration.getQueueName();
			Destination destination = session.createQueue(queue);
			MessageProducer producer = session.createProducer(destination);
			producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
			for (Message message : messages) {
				TextMessage text = session.createTextMessage(new String(message.getContent().getBytes("UTF-8")));
				producer.send(text);
			}
		} catch (Exception e) {
			throw new MendixRuntimeException("Failed to publish messages", e);
		} finally {
	        if (session != null) session.close();
	        if (connection != null) connection.close();
		}
        return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PublishMessages";
	}

	// BEGIN EXTRA CODE
	private void validateInput(PublishAction publishAction) throws CoreException {
		if (publishAction == null) throw new IllegalArgumentException("Input object is empty.");
		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("publishAction", publishAction.getMendixObject());
		Boolean validAction = Core.execute(getContext(), "ActiveMQConnector.PublishAction_ValidatePublish", params);
		if (!validAction) throw new IllegalArgumentException("Configured publishAction is not valid.");
	}
	// END EXTRA CODE
}
