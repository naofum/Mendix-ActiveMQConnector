// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package activemqconnector.actions;

import java.io.IOException;
import java.util.HashMap;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.ActiveMQMessageConsumer;
import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.ExceptionListener;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import activemqconnector.helper.ActiveMQConnectorHelper;
import activemqconnector.proxies.ConfigurationType;
import activemqconnector.proxies.AMQConfiguration;

public class SubscribeMessage extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __configuration;
	private activemqconnector.proxies.AMQConfiguration configuration;

	public SubscribeMessage(IContext context, IMendixObject configuration)
	{
		super(context);
		this.__configuration = configuration;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.configuration = __configuration == null ? null : activemqconnector.proxies.AMQConfiguration.initialize(getContext(), __configuration);

		// BEGIN USER CODE
		validateInput(configuration);
		Connection connection = null;
	
		try {
			ActiveMQConnectionFactory factory = ActiveMQConnectorHelper.createConnectionFactory(configuration);
		    connection = factory.createConnection();
			connection.start();
			final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		    String queueName = configuration.getQueueName();
		    String microflowName = configuration.getAMQConfiguration_Microflows().getCompleteName();
		    String inputName = configuration.getAMQConfiguration_Microflows().getMicroflows_InputParameter().get(0).getName();
			Destination destination = session.createQueue(queueName);
			ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(destination);
			consumer.setMessageListener(new MessageListener() {
			  @Override
			  public void onMessage(Message message) {
		        Core.getLogger("Handle message").info("Message received: " + message);
		        HashMap<String, Object> parameters = new HashMap<String, Object>();
			  	try {
		        	parameters.put(inputName, ((TextMessage) message).getText());
				} catch (JMSException e) {
					Core.getLogger("Handle message").error("Error handling message: " + message, e);
				}
		        IContext systemContext = Core.createSystemContext();
		        try {
					Core.execute(systemContext, microflowName, parameters);
				} catch (CoreException e) {
					Core.getLogger("Handle message").error("Error handling message: " + message, e);
				}
			  }
			});
		} catch (Exception e) {
			if (connection != null) connection.close();
			throw new MendixRuntimeException("Failed to subscribe message " + configuration.getQueueName() + " at " +configuration.getEndpoint() +".", e);
		}
	    return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "SubscribeMessage";
	}

	// BEGIN EXTRA CODE
	private void validateInput(AMQConfiguration configuration) throws CoreException {
		if (configuration == null) throw new IllegalArgumentException("Input object is empty");
		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("aMQConfiguration", configuration.getMendixObject());
		Boolean validConfiguration = Core.execute(getContext(), "ActiveMQConnector.AMQConfiguration_ValidateSubscribe", params);
		if (!validConfiguration) throw new IllegalArgumentException("Configuration is not valid.");
		Boolean validMicroflow = Core.execute(getContext(), "ActiveMQConnector.AMQConfiguration_ValidateMicroflow", params);
		if (!validMicroflow) throw new IllegalArgumentException("Configured microflow is not valid, see log for more details.");
	}
	
//	private String setChannelProperties(Channel channel, RMQConfiguration configuration) throws IOException {
//		String exchangeName = configuration.getExchangeName();
//		ConfigurationType configurationType = configuration.getConfigurationType();
//		String queueName = null;
//		String sendType = null;
//	    if (configurationType == ConfigurationType.Subscribe) {
//	    	sendType = "fanout";
//	    	queueName = channel.queueDeclare().getQueue();
//	    }
//	    else {
//	    	sendType = "direct";
//	    	channel.basicQos(configuration.getConcurrentMessages());
//	    	queueName = exchangeName + "_queue";
//	    	channel.queueDeclare(queueName, true, false, false, null);
//	    }
//		if (configuration.getCreateExchange()) channel.exchangeDeclare(configuration.getExchangeName(), sendType, configuration.getIsDurable(), configuration.getIsAutoDelete(), null);
//		channel.queueBind(queueName, exchangeName, "");
//	    return queueName;
//	}
	// END EXTRA CODE
}
